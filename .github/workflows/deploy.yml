name: 部署（绝对路径+彻底清理）
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装 Node.js 20.19.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: 'npm'

      - name: 构建前端
        run: |
          cd frontend
          npm install
          npm run build
          if [ $(ls -A "dist" | wc -l) -eq 0 ]; then
            echo "dist 为空，构建失败"
            exit 1
          fi

      # 前端传输：用绝对路径 working_dir，确保进入 dist 目录
      - name: 传输前端文件
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "."  # 当前目录（即 dist 内的文件）
          target: "/var/www/programming-tools/frontend"
          working_dir: "/github/workspace/frontend/dist"  # 绝对路径，不报错

      # 后端传输：同样用绝对路径 working_dir
      - name: 传输后端文件
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "."  # 当前目录（即 backend 内的文件）
          target: "/var/www/programming-tools/backend"
          working_dir: "/github/workspace/backend"  # 绝对路径

      # 验证：确保无嵌套
      - name: 验证目录结构
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "=== 前端目录（不应有 frontend/backend） ==="
            ls -la /var/www/programming-tools/frontend
            echo "=== 后端目录（不应有 frontend/backend） ==="
            ls -la /var/www/programming-tools/backend

      # 启动服务
      - name: 启动服务
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/programming-tools/backend
            npm install
            npm install -g pm2 || true
            pm2 restart app.js || pm2 start app.js
            sudo systemctl restart caddy